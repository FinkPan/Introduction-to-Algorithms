3.1-1 假设f(n)和g(n)都是渐近非负函数.使用Θ记号的基本定义
      证明max(f(n),g(n))=Θ(f(n)+g(n))
      答:
        因为Θ(f(n)+g(n))为f(n)+g(n)的上下界,因此
        0 ≤ c1 * (f(n) + g(n)) <= max(f(n) + g(n)) <= c2 * (f(n) + g(n))
        对所有n>=n0成立.领c1=1/2, c2=2上式成立.
        
3.1-2 证明: 对任意实常量a和b,其中b>0,有 (n+a)^b = Θ(n^b)
      答:
      因为a,b是常数,(n+a)^b最高项为 (Cn)^b, C为任意系数,Θ由n最高次项决定,
      即有 (n+a)^b = Θ(n^b)
      
3.1-3 解释为什么"算法A的运行时间至少是O(n^2)"这一表述是无意义的.
      答:
      O记号表明算法运行时间渐近上界. 应该是说:
              算法A的运行时间至多是O(n^2)
              
3.1-4 2^(n+1)=O(2^n)成立么? 2^(2n)=O(2^n)成立么;
      答:
      2^(n+1) = O(2^n) 成立.因为2^(n+1) = 2 * (2^n),因此当c=2时,
      对任意n≥0,有2^(n+1) ≤ 2 * (2^n)成立.
      2^(2n) = O(2^n)不成立.因为2^(2n) = (2^n)^2,不存在常数c和n0可以
      满足(2^n)^2 < c * (2^n).
      
3.1-5 证明定理3.1
      对任意两个函数f(n)和g(n),我们有f(n)=Θ(g(n)),当且仅当f(n)=O(g(n))
      且f(n)=Ω(g(n))
      答:
      充分条件：
          当f(n) = Θ(g(n))时,存在常数c1, c2和n0,使得：
              0 ≤ c1 * g(n) ≤ f(n) ≤ c2 * g(n)
          由0 ≤ c1 * g(n) ≤ f(n) 且g(n)上届为:O(g(n))得 f(n) = O(g(n)).
          由0≤ f(n) ≤ c2 * g(n)  且g(n)下届为:Ω(g(n))得 f(n) = Ω(g(n)).
      同理可得f(n) = O(g(n))和f(n) = Ω(g(n))是f(n) = Θ(g(n))的必要条件. 
    
3.1-6 证明: 一个算法的运行时间为Θ(g(n))当且仅当其最坏情况运行时间为O(g(n))
      且其最好情况运行时间为 Ω(g(n))
      
3.1-7 证明:o(g(n)) ∩ ω(g(n))是空集是空集.
      答:
        o(g(n)) 类似 a<b,而 ω(g(n))类似a>b,  而a<b与a>b只能满足一个,故其
        交集必为空集.
        
3.1-8 可以扩展我们的记号到有两个参数n和m的的情形,其中的n和m可以按不同速率
      独立地趋于无穷,对于给定的函数g(n,m),用O(g(n,m)来表示以下函数集:
            O(g(n,m)) = {f(n,m):存在正常量c,n0,m0,使得对所有n>=n0或者m>=m0,
                                有0<=f(n,m)<=cg(n,m)}
      对Ω(g(n,m))和Θ(g(n,m))给出相应的定义.
      答:
        渐近下届:
        Ω(g(n,m)) = {f(n,m):存在正常量c,n0,m0,使得对所有n>=n0或者m>=m0,
                                有0<= cg(n,m) <=f(n,m)}
        渐近上下届:
        Θ(g(n,m)) = {f(n,m):存在正常量c1,c2,n0,m0,使得对所有n>=n0或者m>=m0,
                                有0<= c1*g(n,m) <= f(n,m) <= c2*g(n,m) }
    