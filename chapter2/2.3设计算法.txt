2.3-1 使用图2-4作为模型,说明归并排序在数组A=<3,41,52,26,38,57,9,49>上的操作;
      答:
               3,9,26,38,41,49,52,57
            3,26,41,52     9,38,49,57
          3,41   26,52    38,57    9,49
         3  41  52   26  38   57   9  49
         
2.3-2 重写过程MERGE,使之不使用哨兵,而是一旦数组L或R的有元素均被复制回A就立刻
      停止,然后把另一个数组的剩余部分复制回A;
      答:
         MERGE(A,p,q,r)
          1. n1 = q-p+1
          2. n2 = r-q
          3. let L[1..n1+1] and R[1..n2+1] be new arrays
          4. for i = 1 to n1
          5.   L[i] = A[p+i-1]
          6. for j = 1 to n2
          7.   R[j] = A[q+j]
          8. i = 1
          9. j = 1
         10. k = p
         11. while i <= n1 and j <= n2
         12.   if L[i] <= R[j]
         13.      A[k] = L[i]
         14.      i += 1
         15.   else
         16.      A[j] = R[j]
         17.      j += 1
         18.    k += 1
         19. if i <= n1
         20.    while i <=n1 
         21.      A[k] = L[i]
         22.      k += 1
         23.      i += 1
         24. else 
         25.    while j < n2
         26.       A[k] = R[j]
         27.       k += 1
         28.       i += 1
         
         
2.3-3 使用数学归纳法证明: 当n刚好是2的幂时,以下递归的解是T(n)=nlgn.
              | 2         若n=2
       T(n)=  |   
              | 2T(n/2)+n 若n = 2^k, k>1
      答:
        n = 2时，
        T(n) = nlgn = 2lg2 = 2 成立。
        假定当n=2^k时成立，有：
        T(n) = 2^klg(2^k) = (2^k) * k
        则当n=2^(k+1)时，有：
        T(n) = 2T(n/2) + n
             = 2T(2^(k+1)/2) + 2^(k+1)
             = 2T(2^k) + 2^(k+1)
             = 2 * (2^k) * k + 2^(k+1)
             = (2^(k+1)) * k + 2^(k+1)
             = (2^(k+1)) * (k+1)
             = (2^(k+1)) * lg(2^(k+1))
             = nlgn
        因此，对于所有的n=2^k, k>=1，递归式均成立。

2.3-4 我们可以把插入排序表示为如下的一个递归过程.为了排序A[1..n],我们
      递归地排序A[1..n-1],然后把A[n]插入已排序的数组A[1..n-1].为插入排序
      的这个递归版本的最坏情况运行时间写一个递归式.
      答:
        NSERTION-SORT-RECURSIVE(A, n, k)  
        if k > 1  
            then INSERTION-SORT-RECURSIVE(A, n, k-1)  
        key = A[k]  
        for i = k-1 to 1  
            if A[i] > key  
                then A[i+1] = A[i]  
            A[i+1] = key  
            
2.3-5 回顾查找问题(参见练习2.1-3),注意到,如果序列A已排好序,就可以将该序列
      的中点与v进行比较.根据比较结果,原序列中有一半就可以不用再做进一步的
      考虑了.二分查找算法重复这个过程,每次都将序列剩余部分的规模减半.为二
      分查找写出迭代或递归的伪代码.证明:二分查找的最坏情况运行时间为Θ(lgn).
      答:
        BINARY-SEARCH-RECURSIVE(A, v, low, high)  
        if low < high  
            then return NIL  
        mid = (low + high)/2 
        if A[mid] = v  
            then return mid  
            elif A[mid] < v  
                then return BINARY-SEARCH-RECURSIVE(A, v, mid+1, high)  
                else return BINARY-SEARCH-RECURSIVE(A, v, low, mid-1) 
                        
2.3.6 注意到2.1节中的过程INSERTION-SORT的第5~7行的while采用一种线性查找来
      (反向)扫描已排序好的子数组A[1..j-1].我们可以使用二分查找(参考练习2.3-5)
      来把插入排序的最坏情况总运行时间改进到 Θ(nlgn) ?
      答:
        因为需要移动元素的平均个数依然是n/2，因此最坏情况总运行时间还是Θ(n^2).
      